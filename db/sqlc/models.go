// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0

package db

import (
	"database/sql"
	"fmt"
	"time"
)

type AddressDefault string

const (
	AddressDefault0 AddressDefault = "0"
	AddressDefault1 AddressDefault = "1"
)

func (e *AddressDefault) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AddressDefault(s)
	case string:
		*e = AddressDefault(s)
	default:
		return fmt.Errorf("unsupported scan type for AddressDefault: %T", src)
	}
	return nil
}

type EventDetailType string

const (
	EventDetailTypeInternal EventDetailType = "Internal"
	EventDetailTypeExternal EventDetailType = "External"
)

func (e *EventDetailType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = EventDetailType(s)
	case string:
		*e = EventDetailType(s)
	default:
		return fmt.Errorf("unsupported scan type for EventDetailType: %T", src)
	}
	return nil
}

type EventRecur string

const (
	EventRecur0 EventRecur = "0"
	EventRecur1 EventRecur = "1"
)

func (e *EventRecur) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = EventRecur(s)
	case string:
		*e = EventRecur(s)
	default:
		return fmt.Errorf("unsupported scan type for EventRecur: %T", src)
	}
	return nil
}

type EventType string

const (
	EventTypeInternal EventType = "Internal"
	EventTypeExternal EventType = "External"
)

func (e *EventType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = EventType(s)
	case string:
		*e = EventType(s)
	default:
		return fmt.Errorf("unsupported scan type for EventType: %T", src)
	}
	return nil
}

type UserPassive string

const (
	UserPassive0 UserPassive = "0"
	UserPassive1 UserPassive = "1"
)

func (e *UserPassive) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserPassive(s)
	case string:
		*e = UserPassive(s)
	default:
		return fmt.Errorf("unsupported scan type for UserPassive: %T", src)
	}
	return nil
}

type UserStatus string

const (
	UserStatus0 UserStatus = "0"
	UserStatus1 UserStatus = "1"
)

func (e *UserStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserStatus(s)
	case string:
		*e = UserStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for UserStatus: %T", src)
	}
	return nil
}

type Address struct {
	ID           int32
	Address      sql.NullString
	Phone        sql.NullString
	City         sql.NullString
	State        sql.NullString
	Country      sql.NullString
	Default      AddressDefault
	ModifiedBy   sql.NullInt32
	ModifiedDate sql.NullTime
	CreatedBy    sql.NullInt32
	CreatedDate  sql.NullTime
}

type Asset struct {
	ID           int32
	Code         sql.NullString
	PositionID   sql.NullString
	PositionFlag sql.NullString
	ModifiedBy   sql.NullInt32
	ModifiedDate sql.NullTime
	CreatedBy    sql.NullInt32
	CreatedDate  sql.NullTime
}

type Attendance struct {
	ID           int32
	PersonalID   sql.NullInt32
	ShiftCode    sql.NullString
	ShiftStart   time.Time
	ShiftEnd     time.Time
	StartTime    sql.NullTime
	EndTime      sql.NullTime
	AttendCode   sql.NullString
	Remark       sql.NullString
	ModifiedBy   sql.NullInt32
	ModifiedDate sql.NullTime
	CreatedBy    sql.NullInt32
	CreatedDate  sql.NullTime
}

type AttendanceDetail struct {
	ID         sql.NullInt32
	PersonalID sql.NullInt32
	AttendCode sql.NullString
	ShiftCode  sql.NullString
	ShiftStart time.Time
}

type Event struct {
	ID        int32
	Code      sql.NullString
	Remark    sql.NullString
	EventDate sql.NullTime
	Type      EventType
	Recur     EventRecur
	// id personal
	Participant sql.NullString
}

type EventDetail struct {
	ID        sql.NullInt32
	Code      sql.NullString
	Remark    sql.NullString
	EventDate sql.NullTime
	Type      EventDetailType
}

type Member struct {
	ID         sql.NullInt32
	PositionID sql.NullInt32
	StartDate  sql.NullTime
	EndDate    sql.NullTime
	Major      sql.NullString
	BatchName  sql.NullString
	BatchDate  sql.NullTime
}

type Personal struct {
	ID         int32
	FirstName  sql.NullString
	MiddleName sql.NullString
	LastName   sql.NullString
	Nick       sql.NullString
	BirthDate  sql.NullTime
	BirthPlace sql.NullString
	Photo      sql.NullString
	UserID     sql.NullInt32
	IDNumber   sql.NullString
}

type Position struct {
	ID           int32
	Code         sql.NullString
	PositionName sql.NullString
	PositionFlag sql.NullString
	Parent       sql.NullInt32
	ParentPath   sql.NullString
	ModifiedBy   sql.NullInt32
	ModifiedDate sql.NullTime
	CreatedBy    sql.NullInt32
	CreatedDate  sql.NullTime
}

type Recruitment struct {
	Code       string
	FirstName  sql.NullString
	MiddleName sql.NullString
	LastName   sql.NullString
	Nick       sql.NullString
	BirthDate  sql.NullTime
	BirthPlace sql.NullString
	Photo      sql.NullString
	IDNumber   sql.NullString
	Status     sql.NullInt32
}

type RecruitmentDetail struct {
	ID           int32
	Code         sql.NullString
	PositionID   sql.NullString
	PositionFlag sql.NullString
	ModifiedBy   sql.NullInt32
	ModifiedDate sql.NullTime
	CreatedBy    sql.NullInt32
	CreatedDate  sql.NullTime
}

type Treasury struct {
	ID        int32
	Period    sql.NullString
	StartDate sql.NullTime
	EndDate   sql.NullTime
	Value     sql.NullString
}

type User struct {
	UserID       int32
	UserName     sql.NullString
	Password     sql.NullString
	Passive      UserPassive
	Status       UserStatus
	ModifiedBy   sql.NullInt32
	ModifiedDate sql.NullTime
	CreatedBy    sql.NullInt32
	CreatedDate  sql.NullTime
}
