// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const getUser = `-- name: getUser :one
SELECT user_id, user_name, password, passive, status, modified_by, modified_date, created_by, created_date FROM user WHERE user_name=$1   LIMIT 1
`

func (q *Queries) getUser(ctx context.Context) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.UserName,
		&i.Password,
		&i.Passive,
		&i.Status,
		&i.ModifiedBy,
		&i.ModifiedDate,
		&i.CreatedBy,
		&i.CreatedDate,
	)
	return i, err
}

const listUsers = `-- name: listUsers :many
SELECT user_name, password FROM user  LIMIT 100
`

type listUsersRow struct {
	UserName sql.NullString
	Password sql.NullString
}

func (q *Queries) listUsers(ctx context.Context) ([]listUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []listUsersRow
	for rows.Next() {
		var i listUsersRow
		if err := rows.Scan(&i.UserName, &i.Password); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
